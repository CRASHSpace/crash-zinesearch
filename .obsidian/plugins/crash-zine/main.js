/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ZinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  zineFolder: "zines"
};
var ZinePlugin = class extends import_obsidian.Plugin {
  toKebabCase(str) {
    return str.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/(^-|-$)/g, "");
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "create-new-zine",
      name: "Create New Zine",
      callback: () => {
        new CreateZineModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "create-tell-me-about-zine",
      name: "Create a Tell me About Zine",
      callback: () => {
        new CreateTellMeAboutZineModal(this.app, this).open();
      }
    });
    this.addSettingTab(new ZineSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async createZinePages(zineInfo) {
    const folderPath = `${this.settings.zineFolder}/${zineInfo.title}`;
    const kebabTitle = this.toKebabCase(zineInfo.title);
    const contentPages = zineInfo.pages - 3;
    const existingFolder = this.app.vault.getAbstractFileByPath(folderPath);
    if (existingFolder) {
      new import_obsidian.Notice(`A zine named "${zineInfo.title}" already exists. Please choose a different name.`);
      return;
    }
    try {
      await this.app.vault.createFolder(folderPath);
    } catch (error) {
    }
    const createYamlFrontMatter = (pageType) => {
      return `---
size: ${zineInfo.size}
type: ${pageType}
tags: [zine, ${kebabTitle}]
---

`;
    };
    if (zineInfo.pages === 8) {
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-cover.md`,
        createYamlFrontMatter("cover") + `# Tell me About

## ${zineInfo.subject}

Size: ${zineInfo.size}
Pages: ${zineInfo.pages}`
      );
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-index.md`,
        createYamlFrontMatter("index") + `# Index

1. [[${kebabTitle}-cover|Tell me About]]
2. [[${kebabTitle}-what-is-it|So... what is it?]]
3. [[${kebabTitle}-why-love-it|Why do you love it?]]
4. [[${kebabTitle}-fun-fact|Give me one fun fact]]
5. [[${kebabTitle}-misconception|What's a common misconception]]
6. [[${kebabTitle}-what-else|What else should we know]]
7. [[${kebabTitle}-back-cover|Back Cover]]`
      );
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-what-is-it.md`,
        createYamlFrontMatter("content") + `# So... what is it?

*Start with the most essential information about your subject. What is it at its core? What makes it unique?*

`
      );
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-why-love-it.md`,
        createYamlFrontMatter("content") + `# Why do you love it?

*Share your personal connection and passion. What drew you to this subject? What keeps you interested?*

`
      );
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-fun-fact.md`,
        createYamlFrontMatter("content") + `# Give me one fun fact

*Share something surprising or unexpected that makes this subject interesting. What's a detail that most people don't know?*

`
      );
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-misconception.md`,
        createYamlFrontMatter("content") + `# What's a common misconception

*What do people often get wrong about this subject? What's the truth behind the myth?*

`
      );
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-what-else.md`,
        createYamlFrontMatter("content") + `# What else should we know

*What additional context or information would help someone understand this subject better? What's the bigger picture?*

`
      );
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-back-cover.md`,
        createYamlFrontMatter("back-cover") + `# Back Cover

*Add your contact information, social media, or any other details you'd like to share.*

`
      );
    } else {
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-cover.md`,
        createYamlFrontMatter("cover") + `# ${zineInfo.title}

## ${zineInfo.subject}

Size: ${zineInfo.size}
Pages: ${zineInfo.pages}`
      );
      let indexContent = `# Index

1. [[${kebabTitle}-cover|Cover]]
`;
      for (let i = 1; i <= contentPages; i++) {
        indexContent += `${i + 1}. [[${kebabTitle}-page-${i}|Page ${i}]]
`;
      }
      indexContent += `${zineInfo.pages}. [[${kebabTitle}-back-cover|Back Cover]]`;
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-index.md`,
        createYamlFrontMatter("index") + indexContent
      );
      for (let i = 1; i <= contentPages; i++) {
        await this.app.vault.create(
          `${folderPath}/${kebabTitle}-page-${i}.md`,
          createYamlFrontMatter("content") + `# Page ${i}

`
        );
      }
      await this.app.vault.create(
        `${folderPath}/${kebabTitle}-back-cover.md`,
        createYamlFrontMatter("back-cover") + `# Back Cover

`
      );
    }
    new import_obsidian.Notice(`Created new zine: ${zineInfo.title}`);
  }
};
var CreateZineModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.title = "";
    this.subject = "";
    this.size = "A4";
    this.pages = 4;
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Create New Zine" });
    new import_obsidian.Setting(contentEl).setName("Title").addText((text) => text.setPlaceholder("Enter zine title").onChange((value) => this.title = value));
    new import_obsidian.Setting(contentEl).setName("Subject").addText((text) => text.setPlaceholder("Enter zine subject").onChange((value) => this.subject = value));
    new import_obsidian.Setting(contentEl).setName("Size").addDropdown((dropdown) => dropdown.addOption("A4", "A4").addOption("A5", "A5").addOption("Letter", "Letter").setValue(this.size).onChange((value) => this.size = value));
    new import_obsidian.Setting(contentEl).setName("Number of Pages").addDropdown((dropdown) => dropdown.addOption("4", "4 pages").addOption("8", "8 pages").addOption("16", "16 pages").addOption("32", "32 pages").addOption("64", "64 pages").setValue(this.pages.toString()).onChange((value) => {
      this.pages = parseInt(value);
    }));
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Create Zine").onClick(async () => {
      if (!this.title || !this.subject) {
        new import_obsidian.Notice("Please fill in all fields");
        return;
      }
      await this.plugin.createZinePages({
        title: this.title,
        subject: this.subject,
        size: this.size,
        pages: this.pages
      });
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CreateTellMeAboutZineModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.title = "";
    this.subject = "";
    this.size = "A4";
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Create a Tell me About Zine" });
    new import_obsidian.Setting(contentEl).setName("Title").addText((text) => text.setPlaceholder("Enter zine title").onChange((value) => this.title = value));
    new import_obsidian.Setting(contentEl).setName("Subject").addText((text) => text.setPlaceholder("Enter zine subject").onChange((value) => this.subject = value));
    new import_obsidian.Setting(contentEl).setName("Size").addDropdown((dropdown) => dropdown.addOption("A4", "A4").addOption("A5", "A5").addOption("Letter", "Letter").setValue(this.size).onChange((value) => this.size = value));
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Create Zine").onClick(async () => {
      if (!this.title || !this.subject) {
        new import_obsidian.Notice("Please fill in all fields");
        return;
      }
      await this.plugin.createZinePages({
        title: this.title,
        subject: this.subject,
        size: this.size,
        pages: 8
      });
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ZineSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Zine Folder").setDesc("The folder where zines will be created").addText((text) => text.setPlaceholder("Enter folder name").setValue(this.plugin.settings.zineFolder).onChange(async (value) => {
      this.plugin.settings.zineFolder = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
